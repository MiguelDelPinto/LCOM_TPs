#ifndef _LCOM_SPACECRAFT_H_
#define _LCOM_SPACECRAFT_H_

// Lcom's lcf header
#include <lcom/lcf.h>

// Group's created headers
#include "sprite.h"

/**
 * @brief Struct that holds information regarding the spacecraft
 * 
 * @param angle The angle, in degrees, that the spacecraft is forming (0 degreees is pointin straight up)
 * 
 */
typedef struct {
  Sprite* sprite;
  uint16_t angle;

  int acceleration_x;
  int acceleration_y;
} Spacecraft;

/**
 * @brief Creates a spacecraft object
 * 
 * @param xpm An x-pixmap of the spacecraft
 * @param x The spacecraft's initial x coordinate
 * @param y The spacecraft's initial y coordinate
 * @return Spacecraft* the created spacecraft
 */
Spacecraft* create_spacecraft(xpm_map_t xpm, int x, int y);

/**
 * @brief Unallocates ta spacecraft object
 * 
 * @param spacecraft Pointer to spacecraft object to be destroyed
 */
void destroy_spacecraft(Spacecraft *spacecraft);

/**
 * @brief Updates the state of the spacecraft
 * 
 * @param spacecraft Pointer to a spacecraft object
 * @param boost True if the spacecraft is boosting, false if it isn't
 * @param rotate 0 if the spacecraft isn't rotating, 1 if it's rotating anti-clockwise and 2 if it's rotating clockwise
 * @return int 0 is successful, anything else if otherwise
 */
int update_spacecraft(Spacecraft* spacecraft, bool boost, uint8_t rotate);

/**
 * @brief Updates the movement of the spacecraft
 * 
 * @param spacecraft Pointer to a spacecraft object
 * @param new_acc_x The new acceleration in x (depends on the angle)
 * @param new_acc_y The new acceleration in y (depends on the angle)
 * @return int 0 is successful, anything else if otherwise
 */
int update_movement(Spacecraft* spacecraft, int new_acc_x, int new_acc_y);

/**
 * @brief Draws the spacecraft on the screen
 * 
 * @param spacecraft Pointer to a spacecraft object
 * @return int 0 if successfule, anything else if otherwise
 */
int draw_spacecraft(Spacecraft* spacecraft);

/**
 * @brief Checks if the spacecraft colided with the terrain
 * 
 * @param spacecraft Pointer to a spacecraft object
 * @param level Sprite of the current level
 * @param ground_color Color of the ground
 * @return true If the spacecraft colided
 * @return false If the spacecraft is safe
 */
bool detect_colision_with_terrain(Spacecraft* spacecraft, Sprite* level, uint32_t ground_color);

/**
 * @brief Checks if the spacecraft colided with one of the projectiles
 * 
 * @param spacecraft Pointer to a spacecraft object
 * @param projectiles Sprite array of projectiles
 * @param num_enemies The number of enemies
 * @return true If the spacecraft colided
 * @return false If the spacecraft is safe
 */
bool detect_colision_with_projectiles(Spacecraft* spacecraft, Sprite* projectiles[], uint8_t num_enemies);


#endif /* _LCOM_SPACECRAFT_H */
