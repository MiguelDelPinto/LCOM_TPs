// Lcom's lcf header
#include <lcom/lcf.h>

// Group's created headers
#include "space_lander.h"
#include "keyboard.h"
#include "mouse.h"
#include "video_card.h"
#include "sprite.h"
#include "graphics.h"
#include "spacecraft.h"

// Current game state
static GameStates game_state = GAME; // FOR NOW IT STARTS IN GAME, NOT IN MENU

// Spacecraft variable
static Spacecraft *spacecraft;

// Background variable
static Sprite* background;

// Device data
extern uint8_t irq_set_timer, irq_set_keyboard, irq_set_mouse;
extern uint32_t global_interrupt_counter;
extern uint8_t scancode;


void start_lunar_lander() {
  spacecraft = create_spacecraft(ship_xpm, 0, 0);
  background = create_sprite(level1_night_xpm, 0, 0, 0, 0); // CHANGE TO MENU LATER

  events.timer_occured = false;
  events.keyboard_occured = false;
  events.mouse_occured = false;
}


void play_lunar_lander() {
  int ipc_status, r;
  message msg;

  //uint8_t packet_array[3];
  //uint8_t index = 0;

  while (game_state != QUIT)
  {
    // get a request message
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    // received notification
    if (is_ipc_notify(ipc_status))
    {
      switch (_ENDPOINT_P(msg.m_source))
      {
        case HARDWARE: // hardware interrupt notification

          // TIMER INTERRUPT
          if (msg.m_notify.interrupts & BIT(irq_set_timer)) {
            
            timer_int_handler();

            if (global_interrupt_counter % (sys_hz()/60) == 0) {
              events.timer_occured = true;
              timer_event.type = UPDATE;
            }

          }
          
          // KEYBOARD INTERRUPT
          if (msg.m_notify.interrupts & irq_set_keyboard)
          {
            kbc_ih();

            switch(scancode) {
              case ESC_BREAK_CODE:
              {
                events.keyboard_occured = true;
                keyboard_event.type = ESCAPE;
                break;
              }

              default:
              {
                break;
              }
            }
          }

          // MOUSE INTERRUPT goes here

        break;
        default:
         break;
      }

      // Handles the events, if any has occured
      if(events.timer_occured || events.keyboard_occured || events.mouse_occured) 
        event_handler();

    }
    else { }
  }  
}


void event_handler() {

  // TIMER EVENT
  if(events.timer_occured) {
    events.timer_occured = false;

    switch(game_state) {
      case GAME:
      {
        draw_sprite(background);
        draw_spacecraft(spacecraft);
        break;
      }

      default:
      {
        break;
      }
    }
  }

  // KEYBOARD EVENT
  if(events.keyboard_occured) {
    events.keyboard_occured = false;

    switch(game_state) {
      case GAME:
      {

        if(keyboard_event.type == ESCAPE) {
          game_state = QUIT;  // TODO: Change so that it goes back to menu
          destroy_lunar_lander();
        }

        break;
      }

      default:
      {
        break;
      }
    }
  }

  // MOUSE EVENT
  if(events.mouse_occured) {
    events.mouse_occured = false;
  }  
}


void destroy_lunar_lander() {
  destroy_spacecraft(spacecraft);
  spacecraft = NULL;

  destroy_sprite(background);
  background = NULL;
}


