// Group's created headers
#include "spacecraft.h"

// Useful header
#include <math.h> 

/**
 * @brief A static variable that holds the value of gravity's acceleration
 */
static int gravity = 1;

/**
 * @brief A static variable that holds the value of the boost's force
 */
static int boost_force = -3;

/**
 * @brief Maximum velocity for the ship, so that it's more controlable
 */
static int max_speed = 3;


Spacecraft* create_spacecraft(xpm_map_t xpm, int x, int y) {
  // Allocates space for the "object"
  Spacecraft* spacecraft = (Spacecraft *) malloc (sizeof(Spacecraft));

  if(spacecraft == NULL)
    return NULL;

  // Creates a sprite with no speed
  spacecraft->sprite = create_sprite(xpm, x, y, 0, 0); 
  
  if(spacecraft->sprite == NULL) {
    free(spacecraft);
    return NULL;
  }

  // Sets the spacecraft's parameteres
  spacecraft->angle = 0;
  spacecraft->acceleration_x = 0;
  spacecraft->acceleration_y = gravity;
  spacecraft->boost = 0;
  spacecraft->rotate = 0;

  return spacecraft;
}


void destroy_spacecraft(Spacecraft *spacecraft) {
  destroy_sprite(spacecraft->sprite);
  spacecraft->sprite = NULL;

  if(spacecraft == NULL)
    return;
    
  free(spacecraft);
}


int update_spacecraft(Spacecraft* spacecraft) {
  
  // Updates the angle of the spacecraft
  switch(spacecraft->rotate) {
    case 0:
      break;
    
    case 1:
      if(spacecraft->angle <= 0) {
        spacecraft->angle = 359;
      }
      else {
        spacecraft->angle = (spacecraft->angle - 2);
      }
      break;

    case 2:
      if(spacecraft->angle >= 359) {
        spacecraft->angle = 0;
      }
      else  {
        spacecraft->angle = (spacecraft->angle + 2);
      }
      break;

    default:
      return 1;
  }

  // Updates the velocity of the spacecraft
  if(spacecraft->boost) {
    int new_acc_x = (int)(boost_force * -sin(degrees_to_radians(spacecraft->angle)));
    int new_acc_y = (int)(boost_force * cos(degrees_to_radians(spacecraft->angle)) + gravity);

    update_movement(spacecraft, new_acc_x, new_acc_y); 
  }
  else {
    update_movement(spacecraft, 0, gravity);
  }

  return 0;
}


int update_movement(Spacecraft* spacecraft, int new_acc_x, int new_acc_y) {

  // Sets the acceleration
  spacecraft->acceleration_x = new_acc_x;
  spacecraft->acceleration_y = new_acc_y;

  bool boosting_over_max =spacecraft->boost && (spacecraft->sprite->xspeed > max_speed || spacecraft->sprite->yspeed > max_speed);
  bool falling_over_max = !spacecraft->boost && spacecraft->sprite->yspeed < max_speed;  

  // Updates the speed of the spacecraft
  if(!boosting_over_max || !falling_over_max) {
    spacecraft->sprite->xspeed += spacecraft->acceleration_x;
    spacecraft->sprite->yspeed += spacecraft->acceleration_y;
  }

  // Updates the position of the spacecraft
  update_sprite(spacecraft->sprite);

  return 0;
}


void rotate_right(Spacecraft* spacecraft) {
  spacecraft->rotate = 2;
}


void rotate_left(Spacecraft* spacecraft) {
  spacecraft->rotate = 1;
}


void stop_rotating(Spacecraft* spacecraft) {
  spacecraft->rotate = 0;
}


void start_boost(Spacecraft* spacecraft) {
  spacecraft->boost = true;
}


void stop_boost(Spacecraft* spacecraft) {
  spacecraft->boost = false;
}


int draw_spacecraft(Spacecraft* spacecraft) {
  return draw_sprite_with_rotation(spacecraft->sprite, spacecraft->angle);
}


int clear_spacecraft(Spacecraft* spacecraft, Sprite* background) {
  return clear_sprite_with_cover(spacecraft->sprite, background);
}


//TODO: implement this function
bool detect_colision_with_terrain(Spacecraft* spacecraft, Sprite* level, uint32_t ground_color) {
  printf("Not completed\n");
  return false;
}


//TODO: implement this function
bool detect_colision_with_projectiles(Spacecraft* spacecraft, Sprite* projectiles[], uint8_t num_enemies) {
  printf("Not completed\n");
  return false;
}
