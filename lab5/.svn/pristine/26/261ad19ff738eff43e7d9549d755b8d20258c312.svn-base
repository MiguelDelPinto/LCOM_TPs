#include <lcom/lcf.h>
#include <math.h>
#include <machine/int86.h>
#include "macros.h"
#include "video_card.h"

static unsigned vram_base;          // VRAMâ€™s physical addresss
static unsigned vram_size;          // VRAM's size
static unsigned hres;               // Horiziontal pixel resolution
static unsigned vres;               // Horiziontal pixel resolution
static unsigned bitsPerPixel;       // Amount of VRAM bits per pixel
static unsigned bytesPerPixel;      // Amount of VRAM bits per pixel
static unsigned colorMode;          // Color Mode

static void *video_mem;             // Frame-buffer VM address
struct minix_mem_range mr;          // physical memory range

unsigned get_hres() { return hres; }
unsigned get_vres() { return vres; }
unsigned get_bitsperpixel() { return bitsPerPixel; }
unsigned get_bytesperpixel() { return bytesPerPixel; }

int set_graphics_mode(uint16_t mode)
{
  mr.mr_base = 0;	
  mr.mr_limit = 1 << 20;
  
  int r;
  if( OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))
    panic("sys_privctl (ADD_MEM) failed: %d\n", r);

  // clears the struct to avoid unpredictability
  reg86_t r86;
  memset(&r86, 0, sizeof(r86));

  r86.ah = VBE_FUNCTION;
  r86.al = SET_VBE_MODE;
  r86.bx = mode | LINEAR_FRAME_BUFFER;
  r86.intno = BIOS_SERVICE;

  if(sys_int86(&r86) != OK) {
    printf("Error in sys_int86()\n");
    return 1;
  }

  if(r86.ah != VBE_OK) {
    printf("VBE return value is different from expected\n");
    return 1;
  }

  return 0;
}

int map_memory()
{
  /* Allow memory mapping */
  mr.mr_base = (phys_bytes) vram_base;  //set lowest memory address
  mr.mr_limit = mr.mr_base + vram_size; //set highest memory address

  int r;
  if (OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))
    panic("sys_privctl (ADD_MEM) failed: %d\n", r);

  video_mem = vm_map_phys(SELF, (void *)mr.mr_base, vram_size);

  if(video_mem == MAP_FAILED)
   panic("couldn't map video memory");

  return 0;
}


//finish this!
int sync_vbe_mode_info(uint16_t mode, vbe_mode_info_t *info)
{
    reg86_t r86;
    memset(&r86, 0, sizeof(r86));

    // alloc mem 
    mmap_t mem_map;
    unsigned tries = 0;
    do
    {
      if(lm_alloc(sizeof(vbe_mode_info_t), &mem_map) == NULL)
      {
        tries++;
        if(tries == MAX_LM_ALLOC_ATTEMPTS)
          printf("lm_alloc() failed to allocate mem for vbe_mode_info_t\n");
      }
      else break;
    } while(tries < MAX_LM_ALLOC_ATTEMPTS);


    r86.ah = VBE_FUNCTION;
    r86.al = GET_VBE_MODE;
    r86.cx = mode;
    r86.es = PB2BASE(mem_map.phys);
    r86.di = PB2OFF(mem_map.phys);
    r86.intno = BIOS_SERVICE;


    if(sys_int86(&r86) != OK) {
      printf("Error in sys_int86()\n");
      return 1;
    }

    //AH register should have 0 if the VBE function completed successfully
    if(r86.ah == VBE_OK) return 0;
    else if(r86.ah == 1){
      printf("Function call failed\n");
      return 1;
    }
    else if(r86.ah == 2){
      printf("Function is not supported in current HW configuration\n");
      return 1;
    }
    else if(r86.ah == 3){
      printf("Function is invalid in current video mode\n");
      return 1;
    }
    
    *info = *((vbe_mode_info_t *) mem_map.virt);

    if(!lm_free(&mem_map)){
      printf("lm_free() failed to free memory\n");
      return 1;
    }

    return 0;
}
// =======================

int sync_vram_info(uint16_t mode)
{
  vbe_mode_info_t info;
  //sync_vbe_mode_info will replace this func below
  //its almost complete
  if (vbe_get_mode_info(mode, &info)) {
    printf("Error while getting info about vbe mode.\n");
    return 1;
  }

  hres = info.XResolution;
  vres = info.YResolution;
  bitsPerPixel = info.BitsPerPixel;
  bytesPerPixel = ceil(bitsPerPixel / 8.0);
  vram_base = info.PhysBasePtr;
  vram_size = hres * vres * bytesPerPixel;
  colorMode = info.DirectColorModeInfo;

  return 0;
}


void* (vg_init)(uint16_t mode)
{
    //this order has to be followed
    if(sync_vram_info(mode)) return NULL;
    if(map_memory()) return NULL;
    if(set_graphics_mode(mode)) return NULL; 

    return video_mem;
}





// ====================================================================================
int draw_pixel(uint16_t x, uint16_t y, uint32_t color)
{
    //place point on the correct line and column
    uint8_t *point = video_mem;
    point += bytesPerPixel * (hres*y + x);

    //writes the color value in the given pixel
    for (unsigned j = 0; j < bytesPerPixel; j++)
    {
       *point = color;
        color >>= 8;
        point++;
    }

    return 0;
}


int(vg_draw_hline)(uint16_t x, uint16_t y, uint16_t len, uint32_t color)
{
    for(unsigned i=x; i < (len+x); i++)
    {
      if(i >= hres) break;
      draw_pixel(i, y, color);
    }

    return 0;
}



int(vg_draw_rectangle)(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color)
{
    for(unsigned i=y; i < (height+y); i++)
      vg_draw_hline(x, i, width, color);

    return 0;
}
// ==========================================================================================
